/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.82
 * Generated at: 2023-10-23 08:23:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.net.URLEncoder;
import de.readysoft.vdoc.VDocBean;
import java.io.*;
import java.util.*;
import java.sql.*;
import javax.naming.*;
import javax.naming.directory.*;

public final class vdoclogin_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 javax.servlet.SingleThreadModel {


final String TIMESTMP0 = "0000-00-00 00:00:00";

VDocBean db;


    /**
      * The base64 method was posted to the SERVLET-INTEREST
      * newsgroup (SERVLET-INTEREST@JAVA.SUN.COM). It is
      * assumed to be public domain.
      */
    static final char[] b2c=
    {
        'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P',
        'Q','R','S','T','U','V','W','X','Y','Z','a','b','c','d','e','f',
        'g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v',
        'w','x','y','z','0','1','2','3','4','5','6','7','8','9','+','/'
    };

    static final char pad = '=';
    static byte[] c2b = null;

    /**
      * Decode a base64 encoded string.
      * @param s The base64 encoded string
      * @return The decoded string
      */
    public static String decodeBase64(String s)
    {
        if (c2b==null) {
            c2b = new byte[256];
            for (byte b=0;b<64;b++) c2b[(byte)b2c[b]]=b;
        } // end if

        byte[] nibble = new byte[4];
        char[] decode = new char[s.length()];
        int d=0;
        int n=0;
        byte b;
        for (int i=0;i<s.length();i++) {
            char c = s.charAt(i);
            nibble[n] = c2b[(int)c];

            if (c==pad) break;

            switch(n) {
            case 0:
                n++;
                break;

            case 1:
                b=(byte)(nibble[0]*4 + nibble[1]/16);
                decode[d++]=(char)b;
                n++;
                break;

            case 2:
                b=(byte)((nibble[1]&0xf)*16 + nibble[2]/4);
                decode[d++]=(char)b;
                n++;
                break;

            default:
                b=(byte)((nibble[2]&0x3)*64 + nibble[3]);
                decode[d++]=(char)b;
                n=0;
                break;
            }
        }
        String decoded = new String(decode,0,d);
        return decoded;
    }

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/vdocbeanclose.jsp.inc", Long.valueOf(1697119915000L));
    _jspx_dependants.put("/vdocbean.jsp", Long.valueOf(1697119915000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.naming.directory");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.naming");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.net.URLEncoder");
    _jspx_imports_classes.add("de.readysoft.vdoc.VDocBean");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			"errorpge.jsp", true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      de.readysoft.vdoc.VDocBean vdocdb = null;
      synchronized (session) {
        vdocdb = (de.readysoft.vdoc.VDocBean) _jspx_page_context.getAttribute("vdocdb", javax.servlet.jsp.PageContext.SESSION_SCOPE);
        if (vdocdb == null){
          vdocdb = new de.readysoft.vdoc.VDocBean();
          _jspx_page_context.setAttribute("vdocdb", vdocdb, javax.servlet.jsp.PageContext.SESSION_SCOPE);
          out.write(" \r\n");
          out.write("	");
          org.apache.jasper.runtime.JspRuntimeLibrary.introspecthelper(_jspx_page_context.findAttribute("vdocdb"), "properties", "dbprops.txt", null, null, false);
          out.write('\r');
          out.write('\n');
          out.write('	');

// 		vdocdb.connect();
		session.setMaxInactiveInterval(900);
	
          out.write('\r');
          out.write('\n');
        }
      }
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
 db = vdocdb; 
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
 synchronized(db){db.setDocsPfad(request.getRealPath("/"));} 
      out.write('\r');
      out.write('\n');
 String vdocURI = URLEncoder.encode(request.getRequestURI() + "?" + request.getQueryString()); 
      out.write('\r');
      out.write('\n');
 vdocdb.logInfo("Uri=" + request.getRequestURI() + "?" + request.getQueryString()); 
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- %@include file='prop-auth.jsp' %-->\r\n");
      out.write("<html><head><title>HTTP Login Page</title>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; Charset=iso-8859-1\">\r\n");
      out.write("<SCRIPT LANGUAGE=\"JavaScript\" TYPE=\"text/javascript\">\r\n");
      out.write("  <!-- Hide script from older browsers\r\n");
      out.write("    if (self.parent.frames.length != 0)\r\n");
      out.write("      self.parent.location=document.location;\r\n");
      out.write("  // end hiding contents -->\r\n");
      out.write("</SCRIPT>\r\n");
      out.write("</head><body>\r\n");

	String auth = request.getHeader("Authorization");
	if (request.getParameter("force") != null) {
		auth = null;
		session.removeAttribute("fullname");
		// if (request.getSession(false) != null) {session.invalidate();}
	}
	if (auth != null) {
		auth = decodeBase64(auth.substring(6));
    String username = auth.substring(0,auth.indexOf(':'));
    String password = auth.substring(1+auth.indexOf(':'));
    if (db.validateUser(username, password)) {
			ResultSet rs = db.getSQLRO("Select * from VDOCUSER where USERID='" + username + "' and PASSWORD='" + password + "'");
      rs.next();
			session.setAttribute("userpkey",rs.getString("PUSER"));
			session.setAttribute("username",rs.getString("USERID"));
			session.setAttribute("fullname",rs.getString("FULLNAME"));
			session.setAttribute("usertype",rs.getString("USERTYPE"));
			rs.close();
			response.sendRedirect("/");
      return;
    } else { 
      out.write("\r\n");
      out.write("      <h2>Invalid credentials!</h2>\r\n");
	}
	} else if (session.getAttribute("fullname") != null) {
		response.sendRedirect("/vdoctest.jsp?x=2");
		return;
	}

      out.write("\r\n");
      out.write("\r\n");
      out.write("<H3>SimpleForum Login</H3>\r\n");
      out.write("Please authenticate using your browser.\r\n");
      out.write("\r\n");

   response.setStatus(response.SC_UNAUTHORIZED);
   response.setHeader("WWW-Authenticate", "Basic Realm=\"VDoc\"");

      out.write("\r\n");
      out.write("\r\n");
      out.write("</body></html>\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');
 db.close(); 
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
