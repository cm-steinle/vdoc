/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.82
 * Generated at: 2023-10-23 08:23:05 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class treemenu_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\r\n");
      out.write("\r\n");

String forWhat = request.getParameter("what");  // vdoc oder vdir
forWhat = (forWhat != null && (
    forWhat.equals("vdoc") || forWhat.equals("vdir") || forWhat.equals("user"))
) ? forWhat : "vdoc";
String forProg = 
  (forWhat.equals("vdoc")) ? "vdocdata2.jsp" : 
  (forWhat.equals("user")) ? "userdata2.jsp" :   
  (forWhat.equals("vdir")) ? "vdirdata.jsp"  :
  "what=falsch";
String keyName = (forWhat.equals("user")) ? "?puser=" : "?id=";

String parentID = request.getParameter("id");
parentID = (parentID == null) ? "?id=0" : "?only=" + parentID; 

      out.write("\r\n");
      out.write("<html ng-app=\"myTreeViewApp\">\r\n");
      out.write("<head>\r\n");
      out.write("	<title>VDir Menu</title>\r\n");
      out.write("	<meta http-equiv=\"Content-Type\" content=\"text/html; Charset=iso-8859-1\">\r\n");
      out.write("  \r\n");
      out.write("  <script src=\"js/ng/angular.min.js\"></script>\r\n");
      out.write("  <script src=\"js/ng/treeview/angular.treeview.js\"></script>\r\n");
      out.write("  <link  href=\"js/ng/treeview/css/angular.treeview.css\"  rel=\"stylesheet\" type=\"text/css\" >\r\n");
      out.write("	<link rel=\"stylesheet\" href=\"vdoc.css\">\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("var myTreeViewApp = angular.module('myTreeViewApp', ['angularTreeview']);\r\n");
      out.write("\r\n");
      out.write("myTreeViewApp.controller(\"myTreeViewCtrl\", function($scope, $http){\r\n");
      out.write("  \r\n");
      out.write("  $scope.keyName = \"?id=\" ; // '");
      out.print( keyName );
      out.write("';\r\n");
      out.write("  \r\n");
      out.write("  $scope.loaddata = function(pkey, target){ //id=36532&\r\n");
      out.write("    $scope.loaded = false;\r\n");
      out.write("    if (! target) {\r\n");
      out.write("      $scope.treedata = [];\r\n");
      out.write("      return $scope.loaddata(pkey, $scope.treedata);\r\n");
      out.write("    }\r\n");
      out.write("//      alert(\"ParentID=\" + pkey);\r\n");
      out.write("      $http.get('");
      out.print( forProg );
      out.write("' + pkey).success(function(treedata){\r\n");
      out.write("      var treepart = treedata.trim();\r\n");
      out.write("      var elem = angular.element(treepart);\r\n");
      out.write("//      console.log(elem);\r\n");
      out.write("      var tmp = [];\r\n");
      out.write("      angular.forEach(elem, function(val, key){\r\n");
      out.write("        if (val.id){\r\n");
      out.write("          var value = angular.element(val);\r\n");
      out.write("          var data = {};\r\n");
      out.write("          data.id = value.attr('id');\r\n");
      out.write("          data.label = value.attr('text');\r\n");
      out.write("          data.childs = (value.attr('child')) ? true : false;\r\n");
      out.write("          data.children = [];\r\n");
      out.write("//          data.collapsed = true;\r\n");
      out.write("          target.push(data);\r\n");
      out.write("        }\r\n");
      out.write("      }, tmp);\r\n");
      out.write("      $scope.loaded = true;\r\n");
      out.write("    });     \r\n");
      out.write("  };\r\n");
      out.write("  \r\n");
      out.write("  $scope.warten = \r\n");
      out.write("  \r\n");
      out.write("  $scope.$watch( 'abc.currentNode', function( newObj, oldObj ) {\r\n");
      out.write("    if( $scope.abc && angular.isObject($scope.abc.currentNode) ) {\r\n");
      out.write("      var pkey = $scope.abc.currentNode.id;\r\n");
      out.write("      if ($scope.abc.currentNode.childs && $scope.abc.currentNode.children.length == 0){\r\n");
      out.write("         $scope.loaded = false;\r\n");
      out.write("         $scope.loaddata($scope.keyName + pkey, $scope.abc.currentNode.children);\r\n");
      out.write("      } else $scope.loaded = true;\r\n");
      out.write("      \r\n");
      out.write("      var myScope = $scope;\r\n");
      out.write("      var warten = function(){\r\n");
      out.write("        if (myScope.loaded === true) {\r\n");
      out.write("          TreeSel(1, pkey);\r\n");
      out.write("          return;\r\n");
      out.write("        } else setTimeout(warten, 111);\r\n");
      out.write("      }\r\n");
      out.write("      warten();\r\n");
      out.write("//       console.log( 'Node Selected!!' );\r\n");
      out.write("       console.log( $scope.abc.currentNode );\r\n");
      out.write("    }\r\n");
      out.write("  }, false);\r\n");
      out.write("\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("<script>\r\n");
      out.write("  function TreeSel(l, s) {\r\n");
      out.write("    var forWhat = \"");
      out.print( forWhat );
      out.write("\";\r\n");
      out.write("    var f = document.forms[0];\r\n");
      out.write("    if (l == 0) {\r\n");
      out.write("      f.action = \"vdircomp.jsp?pkey=\" + s;\r\n");
      out.write("    } else {\r\n");
      out.write("      if (l == 1) {\r\n");
      out.write("        if (forWhat == \"user\"){\r\n");
      out.write("          f.action = \"vdoculist.jsp\";\r\n");
      out.write("        } else {\r\n");
      out.write("          f.action = \"vdoclist.jsp\";\r\n");
      out.write("        }\r\n");
      out.write("      } else {\r\n");
      out.write("        return;\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("    f.id.value = s;\r\n");
      out.write("    f.pkey.value = s;\r\n");
      out.write("    f.what.value = forWhat;\r\n");
      out.write("    f.submit();\r\n");
      out.write("  }\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body ng-controller=\"myTreeViewCtrl\" ng-init=\"loaddata('");
      out.print( parentID );
      out.write("')\" leftmargin=0 marginwidth=0 topmargin=0 marginheight=0 bgcolor=\"#FEFEFE\">\r\n");
      out.write("<!--     <div style=\"margin:10px 0 30px 0; padding:10px; background-color:#EEEEEE; border-radius:5px; font:12px Tahoma;\">\r\n");
      out.write("      <span><b>Selected Node</b> : {{abc.currentNode.id}} {{abc.currentNode.label}}</span>\r\n");
      out.write("    </div> -->\r\n");
      out.write("<div\r\n");
      out.write("    data-angular-treeview=\"true\"\r\n");
      out.write("    data-tree-id=\"abc\"\r\n");
      out.write("    data-tree-model=\"treedata\"\r\n");
      out.write("    data-node-id=\"id\"\r\n");
      out.write("    data-node-label=\"label\"\r\n");
      out.write("    data-node-children=\"children\">\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<form target=\"list\">\r\n");
      out.write("  <input type=hidden name=id value=\"\">\r\n");
      out.write("  <input type=hidden name=pkey value=\"\">\r\n");
      out.write("  <input type=hidden name=what value=\"\">\r\n");
      out.write("</form>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
